package javaProb;

public class GeneralProblem 
{

	
	
//	 A person wants to go from origin to a particular location, he can move in only 4 directions(i.e East, West, North, South) but his friend gave him a long route, help a person to find minimum Moves so that he can reach to the destination.
//	 Input – NESNWES
//	 Output – E
//	 You need to print the lexicographically sorted string. Assume the string will have only ‘E’ ‘N’ ‘S’ ‘W’ characters.
//	 E.g – SSSNEEEW
//	 output – EESS
	
	public static String printMinimumPathDirection(String input)
	{
		char[] chInput = input.toCharArray();
		
		int x = 0; // For E add +1 and W add -1
		int y = 0; // For N add +1 and S add -1
		
		for (char ch:chInput) {
			switch(ch) {
			case 'E':
				x = x +1;
				break;
			case 'W':
				x = x +1;
				break;
			case 'N':
				y = y +1;
				break;
			case 'S':
				y = y-1;
				break;
			}
		}
		
		String output = "";
		if (x > 0) {
			for (int i = 0; i < x; i++ ) {
				output = output + "E";
			}
		} else {
			for (int i = 1; i <= (-x); i++ ) {
				output = output + "W";
			}
		}
		
		return null;
	}
}
